{
  "language": "Solidity",
  "sources": {
    "contracts/TokenizedBallot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\ninterface IMyToken {\n    function getPastVotes(address, uint256) external view returns (uint256);\n}\n\ncontract TokenizedBallot {\n    struct Proposal {\n        bytes32 name;\n        uint voteCount;\n    }\n\n    IMyToken public tokenContract;\n    Proposal[] public proposals;\n    uint256 public targetBlockNumber;\n    mapping (address => uint256) public votePowerSpent;\n\n    constructor( bytes32[] memory _proposalNames, address _tokenContract, uint256 _targetBlockNumber) {\n\n        tokenContract = IMyToken(_tokenContract);\n        targetBlockNumber = _targetBlockNumber;\n        require( isPastBlock(targetBlockNumber),\"block number should be in the past\");\n        for (uint i = 0; i < _proposalNames.length; i++) {\n            proposals.push(Proposal({name: _proposalNames[i], voteCount: 0}));\n        }\n    }\n\n    function vote(uint proposal) external {\n        uint256 votePower = getVotePower(msg.sender);\n        vote(proposal, votePower);\n    }\n\n    function vote(uint256 proposal, uint256 amount) public {\n        uint256 votePower = getVotePower(msg.sender);\n        require(votePower >= amount, \"Error: Trying to voite with more votes than available\");\n        votePowerSpent[msg.sender] += amount;\n        proposals[proposal].voteCount += amount;\n    }\n\n    function getVotePower(address voter) public view returns(uint256) {\n        return tokenContract.getPastVotes(voter, targetBlockNumber) - votePowerSpent[voter];\n    }\n\n    function winningProposal() public view returns (uint winningProposal_) {\n        uint winningVoteCount = 0;\n        for (uint p = 0; p < proposals.length; p++) {\n            if (proposals[p].voteCount > winningVoteCount) {\n                winningVoteCount = proposals[p].voteCount;\n                winningProposal_ = p;\n            }\n        }\n    }\n\n    function winnerName() external view returns (bytes32 winnerName_) {\n        winnerName_ = proposals[winningProposal()].name;\n    }\n\n    function isPastBlock(uint blockNumber) public view returns (bool) {\n        return blockNumber < block.number;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}